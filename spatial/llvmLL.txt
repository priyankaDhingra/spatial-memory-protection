; ModuleID = '<stdin>'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"


target triple = "x86_64-unknown-linux-gnu"


%struct.freeptrs = type { i32, %struct.freeptrs* }


@head = common global %struct.freeptrs* null, align 8


@.str = private unnamed_addr constant [14 x i8] c"List is empty\00", align 1


@.str1 = private unnamed_addr constant [12 x i8] c"value = %d\0A\00", align 1



; Function Attrs: nounwind uwtable


define void @insertel(%struct.freeptrs* %fp) #0 {


entry:


  %0 = load %struct.freeptrs** @head, align 8


  %1 = load %struct.freeptrs** @head, align 8


  %cmp = icmp eq %struct.freeptrs* %1, null


  br i1 %cmp, label %if.then, label %if.else



if.then:                                          ; preds = %entry


  store %struct.freeptrs* %fp, %struct.freeptrs** @head, align 8


  br label %if.end


if.else:                                          ; preds = %entry


 br label %while.cond



while.cond:                                       ; preds = %while.body, %if.else


  %temp.0 = phi %struct.freeptrs* [ %0, %if.else ], [ %3, %while.body ]


  %next = getelementptr inbounds %struct.freeptrs* %temp.0, i32 0, i32 1


  %2 = load %struct.freeptrs** %next, align 8


  %cmp1 = icmp ne %struct.freeptrs* %2, null


  br i1 %cmp1, label %while.body, label %while.end



while.body:                                       ; preds = %while.cond


  %next2 = getelementptr inbounds %struct.freeptrs* %temp.0, i32 0, i32 1


  %3 = load %struct.freeptrs** %next2, align 8


  br label %while.cond



while.end:                                        ; preds = %while.cond


  %next3 = getelementptr inbounds %struct.freeptrs* %temp.0, i32 0, i32 1


  store %struct.freeptrs* %fp, %struct.freeptrs** %next3, align 8


  br label %if.end



if.end:                                           ; preds = %while.end, %if.then


  ret void


}
; Function Attrs: nounwind uwtable


define void @removel(i32 %dt) #0 {


entry:

  %0 = load %struct.freeptrs** @head, align 8


  %data = getelementptr inbounds %struct.freeptrs* %0, i32 0, i32 0


  %1 = load i32* %data, align 4


  %cmp = icmp eq i32 %1, %dt


  br i1 %cmp, label %if.then, label %if.else



if.then:                                          ; preds = %entry


  %next = getelementptr inbounds %struct.freeptrs* %0, i32 0, i32 1


  %2 = load %struct.freeptrs** %next, align 8


  store %struct.freeptrs* %2, %struct.freeptrs** @head, align 8


  %3 = bitcast %struct.freeptrs* %0 to i8*


  call void @free(i8* %3) #3


  br label %if.end13



if.else:                                          ; preds = %entry


  br label %while.cond



while.cond:                                       ; preds = %if.end, %if.else


  %temp.0 = phi %struct.freeptrs* [ %0, %if.else ], [ %11, %if.end ]


  %next1 = getelementptr inbounds %struct.freeptrs* %temp.0, i32 0, i32 1


  %4 = load %struct.freeptrs** %next1, align 8


  %cmp2 = icmp ne %struct.freeptrs* %4, null


  br i1 %cmp2, label %while.body, label %while.end



while.body:                                       ; preds = %while.cond


  %next3 = getelementptr inbounds %struct.freeptrs* %temp.0, i32 0, i32 1


  %5 = load %struct.freeptrs** %next3, align 8


  %data4 = getelementptr inbounds %struct.freeptrs* %5, i32 0, i32 0


  %6 = load i32* %data4, align 4


  %cmp5 = icmp eq i32 %6, %dt


  br i1 %cmp5, label %if.then6, label %if.end



if.then6:                                         ; preds = %while.body


  %next8 = getelementptr inbounds %struct.freeptrs* %temp.0, i32 0, i32 1


  %7 = load %struct.freeptrs** %next8, align 8


  %next9 = getelementptr inbounds %struct.freeptrs* %temp.0, i32 0, i32 1


  %8 = load %struct.freeptrs** %next9, align 8


 %next10 = getelementptr inbounds %struct.freeptrs* %8, i32 0, i32 1


  %9 = load %struct.freeptrs** %next10, align 8


  %next11 = getelementptr inbounds %struct.freeptrs* %temp.0, i32 0, i32 1


  store %struct.freeptrs* %9, %struct.freeptrs** %next11, align 8


  %10 = bitcast %struct.freeptrs* %7 to i8*


  call void @free(i8* %10) #3


  br label %while.end



if.end:                                           ; preds = %while.body


  %next12 = getelementptr inbounds %struct.freeptrs* %temp.0, i32 0, i32 1


  %11 = load %struct.freeptrs** %next12, align 8


  br label %while.cond


while.end:                                        ; preds = %if.then6, %while.cond


  br label %if.end13

if.end13:                                         ; preds = %while.end, %if.then


  ret void

}

; Function Attrs: nounwind
declare void @free(i8*) #1



; Function Attrs: nounwind uwtable
define void @printall() #0 {
entry:
  %0 = load %struct.freeptrs** @head, align 8


  %1 = load %struct.freeptrs** @head, align 8


  %cmp = icmp eq %struct.freeptrs* %1, null


  br i1 %cmp, label %if.then, label %if.else



if.then:                                          ; preds = %entry


  %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str, i32 0, i32 0))


  br label %if.end

if.else:                                          ; preds = %entry

  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else


%temp.0 = phi %struct.freeptrs* [ %0, %if.else ], [ %3, %while.body ]


  %cmp1 = icmp ne %struct.freeptrs* %temp.0, null


  br i1 %cmp1, label %while.body, label %while.end


while.body:                                       ; preds = %while.cond
  %data = getelementptr inbounds %struct.freeptrs* %temp.0, i32 0, i32 0


  %2 = load i32* %data, align 4


  %call2 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str1, i32 0, i32 0), i32 %2)


  %next = getelementptr inbounds %struct.freeptrs* %temp.0, i32 0, i32 1


  %3 = load %struct.freeptrs** %next, align 8


  br label %while.cond

while.end:                                        ; preds = %while.cond


  br label %if.end

if.end:                                           ; preds = %while.end, %if.then


  ret void
}

declare i32 @printf(i8*, ...) #2


; Function Attrs: nounwind uwtable


define i32 @main() #0 {
entry:
  %call = call noalias i8* @malloc(i64 16) #3


  %0 = bitcast i8* %call to %struct.freeptrs*


  %data = getelementptr inbounds %struct.freeptrs* %0, i32 0, i32 0


  store i32 23, i32* %data, align 4


  %next = getelementptr inbounds %struct.freeptrs* %0, i32 0, i32 1


  store %struct.freeptrs* null, %struct.freeptrs** %next, align 8


  call void @insertel(%struct.freeptrs* %0)


  %call1 = call noalias i8* @malloc(i64 16) #3


  %1 = bitcast i8* %call1 to %struct.freeptrs*


  %data2 = getelementptr inbounds %struct.freeptrs* %1, i32 0, i32 0


  store i32 22, i32* %data2, align 4


  %next3 = getelementptr inbounds %struct.freeptrs* %1, i32 0, i32 1


  store %struct.freeptrs* null, %struct.freeptrs** %next3, align 8


  call void @insertel(%struct.freeptrs* %1)


  %call4 = call noalias i8* @malloc(i64 16) #3


  %2 = bitcast i8* %call4 to %struct.freeptrs*


  %data5 = getelementptr inbounds %struct.freeptrs* %2, i32 0, i32 0


  store i32 212, i32* %data5, align 4


 %next6 = getelementptr inbounds %struct.freeptrs* %2, i32 0, i32 1


  store %struct.freeptrs* null, %struct.freeptrs** %next6, align 8


  call void @insertel(%struct.freeptrs* %2)


  %call7 = call noalias i8* @malloc(i64 16) #3


  %3 = bitcast i8* %call7 to %struct.freeptrs*


  %data8 = getelementptr inbounds %struct.freeptrs* %3, i32 0, i32 0


  store i32 23123, i32* %data8, align 4


  %next9 = getelementptr inbounds %struct.freeptrs* %3, i32 0, i32 1


  store %struct.freeptrs* null, %struct.freeptrs** %next9, align 8


  call void @insertel(%struct.freeptrs* %3)


  %call10 = call noalias i8* @malloc(i64 16) #3


  %4 = bitcast i8* %call10 to %struct.freeptrs*


  %data11 = getelementptr inbounds %struct.freeptrs* %4, i32 0, i32 0


  store i32 2123, i32* %data11, align 4


  %next12 = getelementptr inbounds %struct.freeptrs* %4, i32 0, i32 1


  store %struct.freeptrs* null, %struct.freeptrs** %next12, align 8


  call void @insertel(%struct.freeptrs* %4)


  call void @removel(i32 2123)


  call void @printall()


  ret i32 0
}
; Function Attrs: nounwind


declare noalias i8* @malloc(i64) #1


attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-


size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }


attributes #1 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" 


"unsafe-fp-math"="false" "use-soft-float"="false" }


attributes #2 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-


math"="false" "use-soft-float"="false" }


attributes #3 = { nounwind }


!llvm.ident = !{!0}



!0 = metadata !{metadata !"clang version 3.5.0 (tags/RELEASE_350/final)"}
